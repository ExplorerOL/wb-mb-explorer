#!/bin/bash

SETTINGS_FILE="/etc/wb-mb-explorer.conf"
LOG_FILE="/var/log/wb-mb-explorer.log"

DIALOG="dialog"
DIALOG_BACKTITLE=$(echo "WB-MB-EXPLORER - tool for diagnostics and configuring Wirenboard devices with Modbus")
DIALOG_OK=0
DIALOG_CANCEL=1
DIALOG_HELP=2
DIALOG_EXTRA=3
DIALOG_ITEM_HELP=4
DIALOG_ESC=255

SIG_NONE=0
SIG_HUP=1
SIG_INT=2
SIG_QUIT=3
SIG_TRAP=5
SIG_KILL=9
SIG_TERM=15

COM_PORT=/dev/ttyRS485-1
BAUDRATE=9600
PARITY=none
STOPBITS=2
MB_ADDRESS=1
MB_REGISTER=128
MB_REG_TYPE=holding

WB_REG_BAUDRATE=110
WB_REG_PARITY=111
WB_REG_STOPBITS=112
WB_REG_REBOOT=120
WB_REG_ADDRESS=128
WB_REG_BOOTLOADER=129

retval=""

TMP_FILE=$(mktemp /tmp/wb-mb-explorer.XXXXXX)
trap "rm -f $TMP_FILE" $SIG_NONE $SIG_HUP $SIG_QUIT $SIG_KILL $SIG_TERM
trap "echo \"Ctrl-C was pressed\" " $SIG_INT

# exit confirmation window
show_exit_dialog() {
    $DIALOG --yesno "\n            $1" 7 50
    case $? in
    $DIALOG_OK)
        if [[ "$serial_driver_was_running" = "1" ]]; then
            show_info_box "\n       Starting service wb-mqtt-serial"
            systemctl start wb-mqtt-serial
        fi
        clear
        exit
        ;;
    esac
}

# show message box
show_msg_box() {
    $DIALOG --title "$1" --msgbox "\n    $2" 20 80
}

# show help
show_help() {
    $DIALOG --title "$1" --msgbox "\n    $2" 30 150
}

show_yes_no_dialog() {
    $DIALOG --title "$1" --yesno "\n    $2" 15 61
}

show_info_box() {
    $DIALOG --title "INFO" --infobox "$1" 5 50
}

read_communication_settings() {

    if [[ -f $SETTINGS_FILE ]]; then
        COM_PORT=$(cat $SETTINGS_FILE | grep COM_PORT | sed -e 's/COM_PORT://')
        BAUDRATE=$(cat $SETTINGS_FILE | grep BAUDRATE | sed -e 's/BAUDRATE://')
        PARITY=$(cat $SETTINGS_FILE | grep PARITY | sed -e 's/PARITY://')
        STOPBITS=$(cat $SETTINGS_FILE | grep STOPBITS | sed -e 's/STOPBITS://')
        MB_ADDRESS=$(cat $SETTINGS_FILE | grep MB_ADDRESS | sed -e 's/MB_ADDRESS://')
        MB_REGISTER=$(cat $SETTINGS_FILE | grep MB_REGISTER | sed -e 's/MB_REGISTER://')
        MB_REG_TYPE=$(cat $SETTINGS_FILE | grep MB_REG_TYPE | sed -e 's/MB_REG_TYPE://')

    else

        show_msg_box "INFO" "Configuration file not found! Default settings will be applied"

        save_communication_settings

    fi
}

save_communication_settings() {
    echo COM_PORT:$COM_PORT >$SETTINGS_FILE
    echo BAUDRATE:$BAUDRATE >>$SETTINGS_FILE
    echo PARITY:$PARITY >>$SETTINGS_FILE
    echo STOPBITS:$STOPBITS >>$SETTINGS_FILE
    echo MB_ADDRESS:$MB_ADDRESS >>$SETTINGS_FILE
    echo MB_REGISTER:$MB_REGISTER >>$SETTINGS_FILE
    echo MB_REG_TYPE:$MB_REG_TYPE >>$SETTINGS_FILE
}

set_communication_settings() {
    while [ 1 ]; do
        $DIALOG --backtitle "$DIALOG_BACKTITLE" --title "COMMUNICATIONS SETTINGS" --clear --help-button --ok-label "Select item" --cancel-label "Save settings" --help-label "Main menu" \
            --menu "\n
            Current communication settings: \n\
                Port: $COM_PORT \n\
                Baudrate: $BAUDRATE \n\
                Parity: $PARITY \n\
                Stopbits: $STOPBITS \n\
                Device address: $MB_ADDRESS \n\
                Modbus register: $MB_REGISTER \n\
                Modbus register type: $MB_REG_TYPE \n\
                \n\n\
            
                        Chose setting to change:       Current value:" 28 100 15 \
            "Set port" "$COM_PORT" \
            "Set baudrate" "$BAUDRATE" \
            "Set parity" "$PARITY" \
            "Set stopbits" "$STOPBITS" \
            "Set device address" "$MB_ADDRESS" \
            "Set Modbus register" "$MB_REGISTER" \
            "Set register type" "$MB_REG_TYPE" 2>${TMP_FILE}

        case $? in
        $DIALOG_OK) case $(cat ${TMP_FILE}) in
        "Set port") set_com_port ;;
        "Set baudrate") set_baudrate_dialog BAUDRATE ;;
        "Set parity") set_parity_dialog PARITY ;;
        "Set stopbits") set_stopbits_dialog STOPBITS ;;
        "Set device address") set_address_dialog MB_ADDRESS ;;
        "Set Modbus register") set_mb_register ;;
        "Set register type") set_mb_register_type ;;
        esac ;;
        $DIALOG_CANCEL)
            save_communication_settings
            return
            ;;
        *) return ;;
        esac
    done
}

set_com_port() {
    local new_com_port=$($DIALOG --stdout --title "Please choose a port to use" --fselect /dev/ttyRS485-1 14 100)
    if [[ -e $new_com_port ]]; then
        COM_PORT=$new_com_port
    else
        show_msg_box "ERROR" "Port is incorrect or not selected!"
    fi
}

set_baudrate_dialog() {
    $DIALOG --title "Baudrate" --radiolist "Choose avaliable option for baudrate:" 20 61 7 \
        "1200" "bit/s" off \
        "4800" "bit/s" off \
        "9600" "bit/s" ON \
        "19200" "bit/s" off \
        "38400" "bit/s" off \
        "57600" "bit/s" off \
        "115200" "bit/s" off 2>$TMP_FILE

    case $? in
    $DIALOG_OK)
        case $(cat ${TMP_FILE}) in
        "1200") eval $1="1200" ;;
        "4800") eval $1="4800" ;;
        "9600") eval $1="9600" ;;
        "19200") eval $1="19200" ;;
        "38400") eval $1="38400" ;;
        "57600") eval $1="57600" ;;
        "115200") eval $1="115200" ;;
        esac
        ;;
    esac
    #sleep 5
}

set_parity_dialog() {
    $DIALOG --title "Parity" --radiolist "Choose avaliable option for parity:" 20 61 5 \
        "N" "none" ON \
        "O" "odd" off \
        "E" "even" off 2>$TMP_FILE

    case $? in
    $DIALOG_OK)
        case $(cat ${TMP_FILE}) in
        "N") eval $1="none" ;;
        "O") eval $1="odd" ;;
        "E") eval $1="even" ;;
        esac
        ;;
    esac
}

set_stopbits_dialog() {
    $DIALOG --title "Stopbits" --radiolist "Choose avaliable option for stopbits:" 20 61 5 \
        "1" "1 stop bit" off \
        "2" "2 stop bits" ON 2>$TMP_FILE

    case $? in
    $DIALOG_OK)
        case $(cat ${TMP_FILE}) in
        "1") eval $1="1" ;;
        "2") eval $1="2" ;;
        esac
        ;;
    esac

}

set_address_dialog() {
    $DIALOG --title "Enter address of Modbus device" --inputbox "Enter address of Modbus device you wnat to work with (from 1 to 247)" 16 51 2>$TMP_FILE

    case $? in
    $DIALOG_OK)
        local value=$(cat ${TMP_FILE})
        if [[ ("$value" -ge "0") && ("$value" -le "247") && ("$value%1" -eq "0") && ("$value" -ne "") ]]; then
            eval $1=$value
        else
            show_msg_box "ERROR" "Entered device address is incorrect!"
        fi
        ;;

    esac
}

set_mb_register() {

    $DIALOG --title "Enter address of Modbus register" --inputbox "Enter address of Modbus register in decimal or hex (0x12345)" 16 51 2>$TMP_FILE

    case $? in
    $DIALOG_OK)
        local value=$(cat ${TMP_FILE})
        if [[ ("$value" -ge "1") && ("$value" -le "65535") && ("$value" -ne "") ]]; then
            MB_REGISTER=$(cat $TMP_FILE)
        else
            show_msg_box "ERROR" "Entered device register number is incorrect!"
        fi
        ;;
    esac
}

set_mb_register_type() {
    $DIALOG --title "Register type" --radiolist "Choose avaliable option for register type:" 20 61 5 \
        "descrete" "destrete input (read)" off \
        "coil" "descrete output (read/write)" off \
        "input" "input register (read)" off \
        "holding" "holding register (read/write)" ON 2>$TMP_FILE

    case $? in
    $DIALOG_OK) MB_REG_TYPE=$(cat ${TMP_FILE}) ;;
    esac
}

modbus_read_raw() {
    modbus_client --debug -mrtu $COM_PORT -o100 -a$1 -b$BAUDRATE -s$STOPBITS -d8 -p$PARITY -t$2 -r$3 -c$4 2>&1
}

modbus_write() {
    # args: $1=mb_function $2=reg_address $3=value
    modbus_client --debug -mrtu $COM_PORT -o100 -a$MB_ADDRESS -b$BAUDRATE -s$STOPBITS -d8 -p$PARITY -t$1 -r$2 $3 2>&1
}

modbus_read_hex_value() {
    #Function of reading hex value from Modbus register
    #   If reading was successfull - hex value is returned
    #   If reading was unsuccessfull - return complete command output
    readRawResult=$(modbus_read_raw $1 $2 $3 $4)
    readHexValue=$(echo "$readRawResult" | grep Data | sed -e 's/.*Data: //' -e 's/0x//g' -e 's/\s//g')
    if [[ -n $readHexValue ]]; then
        echo $readHexValue
    else
        echo "$readRawResult"
    fi
}

value_hex_to_dec() {
    if [[ "$1" = "0x0000" ]]; then
        echo "0"
    else
        echo $((16#$1))
    fi
}

modbus_read_text() {
    #option -e for parsing characters
    echo -e $(modbus_read_raw $1 $2 $3 $4 | grep Data | sed -e 's/.*Data: //' -e 's/0x00/\\\x/g' -e 's/\s//g') | tr -d "\0"
}

read_device_info() {
    echo -e "\nReading info from device using following communication settings:" >$TMP_FILE
    echo -e "Port $COM_PORT, Baudrate: $BAUDRATE, Parity: $PARITY, Stopbits: $STOPBITS, address $MB_ADDRESS\n" >>$TMP_FILE
    echo "----------------------------------------------------------" >>$TMP_FILE

    local device_address=$(modbus_read_hex_value $MB_ADDRESS 3 128 1)

    if [[ -z $(echo $device_address | grep ERROR) ]]; then

        #Device model
        local device_model=$(modbus_read_text $MB_ADDRESS 4 200 6)
        echo "Device model:" $device_model >>$TMP_FILE

        #Device serial number
        local serial_number=$(modbus_read_hex_value $MB_ADDRESS 4 270 2)
        serial_number=$(value_hex_to_dec $serial_number)
        if [[ -n $(echo $device_model | grep MAP) ]]; then
            serial_number=$(($serial_number - 4261412864))
        fi
        echo "Serial number:" $serial_number >>$TMP_FILE

        #Device FW version
        echo "FW version:" $(modbus_read_text $MB_ADDRESS 4 250 16) >>$TMP_FILE

        #Device FW signature
        echo "FW signature:" $(modbus_read_text $MB_ADDRESS 4 290 12) >>$TMP_FILE

        #Device bootloader version
        echo "Bootloader version:" $(modbus_read_text $MB_ADDRESS 4 330 8) >>$TMP_FILE

        #Device uptime
        echo "Uptime (s):" $(value_hex_to_dec $(modbus_read_hex_value $MB_ADDRESS 4 104 2)) >>$TMP_FILE

        #Device voltage supply
        local supply_voltage=$(modbus_read_hex_value $MB_ADDRESS 4 121 1)
        supply_voltage=$(value_hex_to_dec $supply_voltage)
        supply_voltage=$(echo "scale=3;$supply_voltage / 1000" | bc -l)
        echo "Supply voltage (V): $supply_voltage" >>$TMP_FILE

    else
        echo -e "\nError: device with current settings is unavailable!" >>$TMP_FILE
        echo -e "\nCheck communication settings and device connection." >>$TMP_FILE
    fi
}

show_device_info() {

    while [ 1 ]; do
        stop_serial_driver

        write_log "+++++ SHOW DEVICE INFO"

        echo "" >$TMP_FILE
        read_device_info
        $DIALOG --backtitle "$DIALOG_BACKTITLE" --title "SHOW DEVICE INFO" --ok-label "Read again" --extra-button --extra-label "Main menu" --textbox $TMP_FILE 20 90
        local dialog_button=$?

        write_log "$(cat $TMP_FILE)"

        case $dialog_button in
        $DIALOG_OK) continue ;;
        *) return ;;
        esac

    done

}

read_register() {

    while [ 1 ]; do

        stop_serial_driver
        write_log "+++++ READ REGISTER"

        echo "" >$TMP_FILE
        echo "Reading from device using following communication settings:" >>$TMP_FILE
        echo -e "Port $COM_PORT, Baudrate: $BAUDRATE, Parity: $PARITY, Stopbits: $STOPBITS, address $MB_ADDRESS\n" >>$TMP_FILE
        echo "Modbus register: $MB_REGISTER, Register type: $MB_REG_TYPE" >>$TMP_FILE
        echo "----------------------------------------------------------" >>$TMP_FILE
        echo -e "\nResult: \n" >>$TMP_FILE

        case $MB_REG_TYPE in
        "coil") MB_FUNCTION="0x01" ;;
        "descrete") MB_FUNCTION="0x02" ;;
        "holding") MB_FUNCTION="0x03" ;;
        "input") MB_FUNCTION="0x04" ;;
        esac

        local readResult=$(modbus_read_hex_value $MB_ADDRESS $MB_FUNCTION $MB_REGISTER 1)

        if [[ -z $(echo $readResult | grep ERROR) ]]; then
            echo "Read data (hex): 0x$readResult" >>$TMP_FILE
            readResult=$(value_hex_to_dec $readResult)
            echo "Read data (dec): $readResult" >>$TMP_FILE

        else
            echo "Error reading register $MB_REGISTER" >>$TMP_FILE
            echo "" >>$TMP_FILE
            echo "$readResult" >>$TMP_FILE
        fi

        $DIALOG --backtitle "$DIALOG_BACKTITLE" --title "READ REGISTER" --ok-label "Read register again" --extra-button --extra-label "Write to register" --help-button --help-label "Main menu" --textbox $TMP_FILE 25 90 # echo "start dialog" > $TMP_FILE
        local dialog_button=$?

        write_log "$(cat $TMP_FILE)"

        case $dialog_button in
        $DIALOG_OK) continue ;;
        $DIALOG_EXTRA) write_register ;;
        *) return ;;
        esac

    done

}

write_register() {
    stop_serial_driver
    write_log "+++++ WRITE REGISTER"

    case $MB_REG_TYPE in
    "coil") MB_FUNCTION="0x05" ;;
    "holding") MB_FUNCTION="0x06" ;;
    "descrete" | "input")
        show_msg_box "ERROR" "Register type is $MB_REG_TYPE, can't write!"
        return
        ;;
    esac

    $DIALOG --title "WRITE REGISTER" --inputbox "Enter new register value in decimal (100) or hex (0x64)" 16 51 2>$TMP_FILE

    local input_value="$(cat $TMP_FILE)"

    if [[ "$input_value" -ge "0" && "$input_value" -le "65535" && -n "$input_value" ]]; then
        local write_result=$(modbus_write $MB_FUNCTION $MB_REGISTER $input_value)

        if [[ -n "$(echo $write_result | grep SUCCESS)" ]]; then
            echo -e "\nData $input_value was successfully written to register $MB_REGISTER" >$TMP_FILE
        else
            echo -e "\nError writing register!!!\n\n$write_result" >$TMP_FILE

        fi

        $DIALOG --backtitle "$DIALOG_BACKTITLE" --title "WRITE RESULTS" --exit-label "OK" --textbox $TMP_FILE 18 80

    else

        show_msg_box "ERROR" "Wrong new value was entered!"

    fi

    write_log "$(cat $TMP_FILE)"
}

modbus_write_param() {
    #args: $1=wb_reg $2=value
    local write_result=$(modbus_write 6 $1 $2 2>&1)
    #echo $write_result
    sleep 1
    if [[ (-n "$(echo $write_result | grep SUCCESS)") || ($MB_ADDRESS == "0") ]]; then
        echo -e "\n                     Command was successfully executed!" >$TMP_FILE
    else
        echo -e "\n                     Error during executing command!!!\n\n$write_result" >$TMP_FILE

    fi
    $DIALOG --backtitle "$DIALOG_BACKTITLE" --title "COMMAND EXECUTING RESULTS" --exit-label "OK" --textbox $TMP_FILE 18 80
}

menu_device_setup() {
    local tmp_arg

    while [ 1 ]; do
        retval=""
        read_device_info
        local current_device_info="$(cat $TMP_FILE | grep "Device model\|Serial number")"

        if [[ -z "$current_device_info" ]]; then
            current_device_info=$(echo "Device is unavailable!")
        fi

        ${DIALOG} --clear --help-button --cancel-label "Main Menu" --backtitle "$DIALOG_BACKTITLE" --title "DEVICE SETUP" \
            --menu "\n 
    Comm settings:\n 
        Port:$COM_PORT Address:$MB_ADDRESS Baudrate:$BAUDRATE Parity:$PARITY Stopbits:$STOPBITS\n\n
    Device for setup:\n
        $current_device_info
        \n\n\
        Chose action to do" 30 120 8 \
            "Set address" "Sets device Modbus address" \
            "Set baudrate" "Sets device baudrate" \
            "Set parity" "Sets device parity" \
            "Set stopbits" "Sets device stopbits" \
            "Reboot device" "Sends command to reboot device" \
            "Jump into bootloader mode" "Sends command to jump into bootloader" \
            "Reset device address to 1" "Sends broadcast command to reset all devices addresses to 1" \
            "Reset device comm settings" "Turns off and on device and resets comm settings to default" \
            2>$TMP_FILE

        case $? in
        $DIALOG_OK)
            case $(cat $TMP_FILE) in
            "Set address")
                set_address_dialog retval
                if [[ "$retval" != "" ]]; then
                    modbus_write_param $WB_REG_ADDRESS $retval
                    show_yes_no_dialog "PROMPT" \
                        "
            Do you want to change device address\n \
            in current device settings to $retval?"
                    case $? in
                    $DIALOG_OK)
                        MB_ADDRESS=$retval
                        save_communication_settings
                        ;;
                    esac
                fi
                ;;
            "Set baudrate")
                set_baudrate_dialog retval
                if [[ "$retval" != "" ]]; then
                    tmp_arg=$(($retval / 100))
                    modbus_write_param $WB_REG_BAUDRATE $tmp_arg
                    show_yes_no_dialog "PROMPT" \
                        "
            Do you want to change baudrate\n \
            in current comm settings to $retval?"
                    case $? in
                    $DIALOG_OK)
                        BAUDRATE=$retval
                        save_communication_settings
                        ;;
                    esac
                fi

                ;;

            "Set parity")
                set_parity_dialog retval
                if [[ "$retval" != "" ]]; then
                    case "$retval" in
                    "none") tmp_arg=0 ;;
                    "odd") tmp_arg=1 ;;
                    "even") tmp_arg=2 ;;
                    esac
                    modbus_write_param $WB_REG_PARITY $tmp_arg

                    show_yes_no_dialog "PROMPT" \
                        "
            Do you want to change parity\n \
            in current comm settings to $retval?"
                    case $? in
                    $DIALOG_OK)
                        PARITY=$retval
                        save_communication_settings
                        ;;
                    esac
                fi
                ;;

            "Set stopbits")
                set_stopbits_dialog retval
                if [[ "$retval" != "" ]]; then
                    modbus_write_param $WB_REG_STOPBITS $retval

                    show_yes_no_dialog "PROMPT" \
                        "
            Do you want to change stopbits\n \
            in current comm settings to $retval?"
                    case $? in
                    $DIALOG_OK)
                        STOPBITS=$retval
                        save_communication_settings
                        ;;
                    esac
                fi
                ;;

            "Reboot device")
                modbus_write_param $WB_REG_REBOOT 1
                ;;
            "Jump into bootloader mode")
                modbus_write_param $WB_REG_BOOTLOADER 1
                ;;
            "Reset device address to 1")
                show_yes_no_dialog "WARNING" \
                    "
                       Attention!\n \
      Addresses of ALL DEVICES connected to port \n \
          $COM_PORT will be reset to 1!!!\n \
                     Are yous sure?"
                case $? in
                $DIALOG_OK)
                    local tmp_addr=$MB_ADDRESS
                    MB_ADDRESS=0
                    modbus_write_param $WB_REG_ADDRESS 1
                    MB_ADDRESS=$tmp_addr

                    show_yes_no_dialog "PROMPT" \
                        "
            Do you want to change device address\n \
            in current device settings to 1?"
                    case $? in
                    $DIALOG_OK)
                        MB_ADDRESS=1
                        save_communication_settings
                        ;;
                    esac

                    ;;

                esac
                ;;

            "Reset device comm settings")
                show_yes_no_dialog "WARNING" \
                    "
                        Attention!\n \
        Addresses and communication settings \n \
        of ALL DEVICES connected to port \n \
        $COM_PORT will be reset to default!!!\n \
                      Are yous sure ?"

                case $? in
                $DIALOG_OK)

                    show_info_box "\n       Turning controller V_OUT to OFF..."
                    mosquitto_pub -t '/devices/wb-gpio/controls/V_OUT/on' -r -m 0
                    sleep 3
                    show_info_box "       Turning controller V_OUT to ON...\nTurn on device power supply if it is externally powered!"
                    mosquitto_pub -t '/devices/buzzer/controls/frequency/on' -r -m 3000
                    mosquitto_pub -t '/devices/buzzer/controls/volume/on' -r -m 50
                    mosquitto_pub -t '/devices/buzzer/controls/enabled/on' -r -m 1
                    mosquitto_pub -t '/devices/wb-gpio/controls/V_OUT/on' -r -m 1

                    sleep 1.2
                    show_info_box "\n       Sending reset command..."
                    mosquitto_pub -t '/devices/buzzer/controls/enabled/on' -r -m 0
                    wb-mcu-fw-flasher -d $COM_PORT -a0 -u

                    sleep 2
                    show_info_box "\n       Reset comm settings command was sent..."

                    show_info_box "\n       Turn controller V_OUT to OFF to reboot device..."
                    mosquitto_pub -t '/devices/wb-gpio/controls/V_OUT/on' -r -m 0
                    sleep 2
                    show_info_box "\n       Turn controller V_OUT to ON"
                    mosquitto_pub -t '/devices/wb-gpio/controls/V_OUT/on' -r -m 1
                    sleep 2
                    show_info_box "\n       Procedure finished!"
                    sleep 2

                    show_yes_no_dialog "PROMPT" \
                        "
            Do you want to change comm settings\n \
                    to default falues?"
                    case $? in
                    $DIALOG_OK)
                        MB_ADDRESS=1
                        BAUDRATE="9600"
                        PARITY="none"
                        STOPBITS=2
                        save_communication_settings
                        ;;
                    esac

                    ;;

                esac
                ;;
            esac

            ;;

        $DIALOG_HELP)
            show_help "DEVICE SETUP HELP" "\n
            Set address  - sets device Modbus address using current communications settings\
            Set baudrate - sets device baudrate using current communications settings\
            Set parity - sets device parity using current communications settings\
            Set stopbits - sets device stopbits using current communications settings\
            Reboot device - sends command to reboot device using current communications settings\
            Jump into bootloader mode - sends command to jump into bootloader \
            Reset device address to 1 - sends broadcast command to reset all devices addresses to 1 \
            Reset device comm settings - turns off and on device and resets comm settings to default.\
                                         If device is powered from V_OUT terminal this procedure will be \
                                         automatic.
                                         If device is externally powered turn off power before procedure.\
                                         Turn on power on when the buzzer will sound. After procedure device \
                                         should be rebooted turning off and on power manually again"
            ;;
        *) return ;;
        esac
    done
}

menu_network_scan() {
    while [ 1 ]; do
        ${DIALOG} --clear --help-button --cancel-label "Main Menu" --backtitle "$DIALOG_BACKTITLE" --title "NETWORK SCAN" \
            --menu "\n 
    Current communication settings: \n\
        Port: $COM_PORT \n\
        Baudrate: $BAUDRATE \n\
        Parity: $PARITY \n\
        Stopbits: $STOPBITS \n\n\

    Current device settings: \n\
        Address: $MB_ADDRESS \n\
        \n\n\
        Chose action to do" 30 120 8 \
            "Comm settings scan" "Detection communication settings of device with address $MB_ADDRESS at port $COM_PORT" \
            "Scan of addresses" "Scan network for devices using current communication settings" \
            "Complete scan" "Scan network for devices using all possible communication settings" 2>$TMP_FILE

        case $? in
        $DIALOG_OK)
            case $(cat $TMP_FILE) in
            "Comm settings scan") network_scan "comm_settings" ;;
            "Scan of addresses") network_scan "address" ;;
            "Complete scan") network_scan "complete" ;;
            esac
            ;;
        $DIALOG_HELP)
            show_help "NETWORK SCAN HELP" "\n
        Comm settings scan - tool tries to communicate with device using specified port, address\n
                             and all combinations of other communication settings\n\n
        Scan of addresses - tool searches for devices using specified port and communication settings\n\n
        Complete scan - tool searches for devices using specified port. All possible combinations\n
                        will be used\n"
            ;;
        *) return ;;
        esac
    done

}

network_scan() {
    local a
    local b
    local p
    local s
    local scan_result
    local device_address
    local device_model
    local serial_number
    local fw_version
    local progress=0

    local scan_baudrate="9600 115200 19200 57600 38400 4800 2400 1200"
    local scan_addr_first=1
    local scan_addr_last=247
    local scan_parity="none odd even"
    local scan_stopbits="1 2"
    local scan_quantity=11856
    local dialog_title="COMPLETE DEVICE SCAN"

    case "$1" in
    "comm_settings")
        scan_addr_first=$MB_ADDRESS
        scan_addr_last=$MB_ADDRESS
        scan_quantity=48
        dialog_title="COMM SETTINGS SCAN"

        write_log "+++++ COMM SETTINGS SCAN"
        echo "Scan results (comm settings scan)" $(date +"%Y-%m-%d %H:%M") >$TMP_FILE
        echo -e "Port = $COM_PORT Address = $MB_ADDRESS\n" >>$TMP_FILE
        ;;
    "address")
        scan_baudrate=$BAUDRATE
        scan_parity=$PARITY
        scan_stopbits=$STOPBITS
        scan_quantity=247
        dialog_title="SCAN OF ADDRESSES"

        write_log "+++++ SCAN OF ADDRESSES"
        echo "Scan results (scan of addresses)" $(date +"%Y-%m-%d %H:%M") >$TMP_FILE
        echo -e "Port = $COM_PORT Baudrate = $BAUDRATE, Parity = $PARITY, Stop bits = $STOPBITS\n" >>$TMP_FILE
        ;;
    "complete")
        write_log "+++++ COMPLETE NETWORK SCAN"
        echo "Scan results (complete network scan)" $(date +"%Y-%m-%d %H:%M") >$TMP_FILE
        echo -e "Port = $COM_PORT\n" >>$TMP_FILE
        ;;
    *) return 1 ;;
    esac

    stop_serial_driver
    echo -e "  Address | Device_model | Serial_number | FW_version | Boudrate | Parity | Stopbits\n" >>$TMP_FILE

    (
        for b in $scan_baudrate; do
            for a in $(seq $scan_addr_first $scan_addr_last); do
                for p in $scan_parity; do
                    for s in $scan_stopbits; do
                        progress=$(($progress + 1))

                        echo "XXX"
                        echo $(($progress * 100 / $scan_quantity))
                        echo -e "Scan for devices using Port = $COM_PORT"
                        echo -e " Address = $a, Baudrate = $b, Parity = $p, Stop bits = $s\n"
                        tail -n16 $TMP_FILE
                        echo "XXX"

                        sleep 0.01
                        scan_result=$(modbus_client --debug -mrtu $COM_PORT -o100 -a$a -b$b -s$s -d8 -p$p -t4 -r128 2>&1)

                        #check for answer with error -> unknown Modbus device
                        if [[ -n "$(echo -e $scan_result | grep "ERROR Illegal")" ]]; then
                            echo -e "    $a | Unknown Modbus device | | | $b | $p | $s" >>$TMP_FILE
                            continue
                        fi

                        #check for answer without error -> Wirenboard Modbus device
                        device_address=$(echo -e $scan_result | grep Data: | sed -e 's/.*Data: //' -e 's/0x//g' -e 's/\s//g')
                        device_address=$(value_hex_to_dec $device_address)
                        if [[ ("$device_address" -ge "1") && ("$device_address" -le "247") ]]; then
                            device_model=$(echo -e "$(modbus_client -mrtu $COM_PORT --debug -o100 -a$a -b$b -s$s -d8 -p$p -t4 -r200 -c6 2>/dev/null | grep Data: | sed -e 's/.*Data: //' -e 's/0x00/\\\x/g' -e 's/\s//g')" | tr -d "\0")
                            serial_number=$(modbus_client -mrtu $COM_PORT -o100 -a$a -b$b -s$s -d8 -p$p -t4 -r270 -c2 2>/dev/null | grep Data: | sed -e 's/.*Data: //' -e 's/0x//g' -e 's/\s//g')
                            serial_number=$(value_hex_to_dec $serial_number)
                            if [[ -n $(echo $device_model | grep MAP) ]]; then
                                serial_number=$(($serial_number - 4261412864))
                            fi
                            fw_version=$(echo -e "$(modbus_client -mrtu $COM_PORT --debug -o100 -a$a -b$b -s$s -d8 -p$p -t4 -r250 -c16 2>/dev/null | grep Data: | sed -e 's/.*Data: //' -e 's/0x00/\\\x/g' -e 's/\s//g')" | tr -d "\0")
                            echo -e "    $a | $device_model | $serial_number | $fw_version | $b | $p | $s" >>$TMP_FILE
                        fi

                    done

                done

            done
        done
    ) |
        $DIALOG --title "$dialog_title" --backtitle "$DIALOG_BACKTITLE" --gauge "progress bar" 30 135 5

    write_log "$(cat $TMP_FILE)"
    $DIALOG --title "$dialog_title" --backtitle "$DIALOG_BACKTITLE" --exit-label "OK" --textbox $TMP_FILE 30 135
}

menu_fw_update() {
    while [ 1 ]; do
        ${DIALOG} --clear --help-button --cancel-label "Main Menu" --backtitle "$DIALOG_BACKTITLE" --title "FIRMWARE UPDATE" \
            --menu "\n                                                   Attention!!! \n\n \
        These functions are intended for updating firmwares of devices connected via RS-485 network. \n \
        Do not do this if you are not sure in correctness of your actions. \n\n\
    Current communication settings: \n\
        Port: $COM_PORT \n\
        Baudrate: $BAUDRATE \n\
        Parity: $PARITY \n\
        Stopbits: $STOPBITS \n\n\
    Current device settings: \n\
        Address: $MB_ADDRESS \n\
        \n\n\
        Chose action to do" 30 120 8 \
            "Device FW update" "Update firmware of device with address $MB_ADDRESS at port $COM_PORT from repository" \
            "Force device FW update" "Force update FW of device with address $MB_ADDRESS at port $COM_PORT from repository" \
            "Recover device FW" "Recover firmware of device with address $MB_ADDRESS at port $COM_PORT from repository" \
            "Update FW of all devices" "Update FW of all devices configured in controller from repository" \
            "Update FW using file" "Update FW of device with address $MB_ADDRESS at port $COM_PORT using file" 2>$TMP_FILE

        case $? in
        $DIALOG_OK)
            case $(cat $TMP_FILE) in
            "Device FW update") update_device_fw_from_internet "update-fw" ;;
            "Force device FW update") update_device_fw_from_internet "update-fw --force" ;;
            "Recover device FW") update_device_fw_from_internet "recover" ;;
            "Update FW of all devices") update_all_devices_fw_from_internet ;;
            "Update FW using file") update_fw_using_file ;;
            esac
            ;;
        $DIALOG_HELP)
            show_help "HELP" "\n
        Device FW update - updates FW of device with current address\n
                           The newest version of firmware is downloaded from internet automatically\n\n
        Force device FW update - like Device FW update, but reflashes device even it has the newest FW version already\n\n
        Recover device FW - recovers FW of device with current address. Use it if device is in bootloader mode\n\n
        Update FW of all devices - like Device FW update, but for ALL devices configured in Wirenboard controller\n\n
        Update FW using file - updates FW of device with current communication settings using specified FW file\n"
            ;;
        *) return ;;
        esac
    done

}

update_device_fw_from_internet() {
    stop_serial_driver

    local window_title=""
    local button_title=""

    case "$1" in
    "update-fw")
        window_title="DEVICE FW UPDATE"
        button_title="Update firmware"
        ;;
    "update-fw --force")
        window_title="FORCE DEVICE FW UPDATE"
        button_title="Force firmware update"
        ;;
    "recover")
        window_title="DEVICE FW RECOVER"
        button_title="Recover firmware"
        ;;
    *) return 1 ;;
    esac

    write_log "+++++ $window_title"
    echo "" >$TMP_FILE

    if [[ "$1" != "recover" ]]; then
        echo -e "Device info before "${1##--} "FW update:\n" >>$TMP_FILE
        read_device_info
        echo -e "--------------------------------------\n" >>$TMP_FILE
    fi

    echo -e "                                                 Attention!!!\n
                    Firmware updating process may take up to several minutes.\n
                    Don't interrupt this process!!! Otherwise you will damage your device!!!\n" >>$TMP_FILE

    $DIALOG --backtitle "$DIALOG_BACKTITLE" --title "$window_title" --ok-label "$button_title" --extra-button --extra-label "Cancel" --textbox $TMP_FILE 28 120

    case $? in
    $DIALOG_OK)

        wb-mcu-fw-updater $1 -a$MB_ADDRESS $COM_PORT 2>&1 | tee -a $TMP_FILE
        sleep 2
        sed -i -e 's/[[:cntrl:]]//g' -e 's/\[......//g' -e 's/\[..//g' $TMP_FILE

        if [[ -z $(cat $TMP_FILE | grep Done) ]]; then
            echo -e "\nError updating firmware: device with address $MB_ADDRESS is unavaliable!" >$TMP_FILE
        fi

        sleep 1
        echo -e "\n--------------------------------------" >>$TMP_FILE
        echo -e "Device info after FW update:\n" >>$TMP_FILE
        local tmp_info=$(cat $TMP_FILE)
        read_device_info

        echo -e "$tmp_info\n $(cat $TMP_FILE)" >$TMP_FILE

        $DIALOG --backtitle "$DIALOG_BACKTITLE" --title "DEVICE FW UPDATE" --exit-label "OK" --textbox $TMP_FILE 45 150
        local dialog_button=$?

        write_log "$(cat $TMP_FILE)"

        case $dialog_button in
        $DIALOG_OK) return ;;
        esac
        ;;

    $DIALOG_EXTRA) return ;;
    esac

}

update_all_devices_fw_from_internet() {
    stop_serial_driver

    show_yes_no_dialog "WARNING" \
        "   
                      Attention!\n
 Firmware updating process may take up to several minutes.\n
                Don't interrupt this process!!!\n
          Otherwise you will damage your devices!!!\n\n        

        Are yous sure to update firmwares of \n  \
                  ALL DEVICES\n \
             configured in controller?"
    case $? in
    $DIALOG_OK)
        write_log "+++++ ALL DEVICES FW UPDATE"
        echo -e "\nUpdate FW of all devicess configured in controller at port $COM_PORT\n" >$TMP_FILE
        wb-mcu-fw-updater update-all 2>&1 | tee -a $TMP_FILE
        sleep 2
        sed -i -e 's/[[:cntrl:]]//g' -e 's/\[..//g' -e 's/\;10.//g' $TMP_FILE
        $DIALOG --backtitle "$DIALOG_BACKTITLE" --title "ALL DEVICES FW UPDATE" --exit-label "OK" --textbox $TMP_FILE 45 150
        local dialog_button=$?

        write_log "$(cat $TMP_FILE)"

        case $dialog_button in
        $DIALOG_OK) return ;;
        esac
        ;;

    *) return ;;
    esac

}

update_fw_using_file() {
    stop_serial_driver

    local window_title="DEVICE FW UPDATE USING FILE"

    write_log "+++++ $window_title"

    read_device_info

    echo -e "--------------------------------------\n" >>$TMP_FILE
    echo -e "                                                 Attention!!!\n
                    Firmware updating process may take up to several minutes.\n
                    Don't interrupt this process!!! Otherwise you will damage your device!!!\n" >>$TMP_FILE

    while [ 1 ]; do
        $DIALOG --backtitle "$DIALOG_BACKTITLE" --title "$window_title" --ok-label "Select FW file" --extra-button --extra-label "Cancel" --textbox $TMP_FILE 28 120

        case $? in
        $DIALOG_OK)
            local fw_file=$($DIALOG --stdout --title "$window_title" --fselect /root 14 100)
            if [[ -f $fw_file && -n $(echo $fw_file | grep ".wbfw") ]]; then
                echo "Firmware file:" $fw_file >>$TMP_FILE
                $DIALOG --backtitle "$DIALOG_BACKTITLE" --title "$window_title" --ok-label "Start" --extra-button --extra-label "Cancel" --textbox $TMP_FILE 28 120

                case $? in
                $DIALOG_OK)

                    wb-mcu-fw-flasher -d $COM_PORT -b$BAUDRATE -b$PARITY -s$STOPBITS -a$MB_ADDRESS -j -f $fw_file 2>&1 | tee -a $TMP_FILE
                    sleep 2
                    ;;
                *) return ;;

                esac
                sleep 1
                echo -e "\n--------------------------------------" >>$TMP_FILE
                echo -e "Device info after FW update:\n" >>$TMP_FILE
                local tmp_info=$(cat $TMP_FILE)

                read_device_info

                echo -e "$tmp_info\n $(cat $TMP_FILE)" >$TMP_FILE
                $DIALOG --backtitle "$DIALOG_BACKTITLE" --title "$window_title" --exit-label "OK" --textbox $TMP_FILE 45 150
                write_log "$(cat $TMP_FILE)"
                return
            else
                show_msg_box "ERROR" "File with firmware not found or not selected!"

            fi
            ;;

        $DIALOG_EXTRA) return ;;
        esac
    done
}

show_log_file() {
    $DIALOG --backtitle "$DIALOG_BACKTITLE" --title "LOG FILE" --exit-label "OK" --textbox $LOG_FILE 32 150
}

menu_main() {

    while [ 1 ]; do
        $DIALOG --clear --help-button --cancel-label "Exit" --backtitle "$DIALOG_BACKTITLE" --title "MAIN MENU" \
            --menu "\n
            Current communication settings: \n\
                Port: $COM_PORT \n\
                Baudrate: $BAUDRATE \n\
                Parity: $PARITY \n\
                Stopbits: $STOPBITS \n\n\
            Current device settings: \n\
                Address: $MB_ADDRESS \n\
                Modbus register: $MB_REGISTER \n\
                Modbus register type: $MB_REG_TYPE \n\
                \n\n\
     
            Choose action to do                     " 30 100 8 \
            "1 Settings" "Set communication settings" \
            "2 Show device info" "Read information about device" \
            "3 Read/write register" "Read/write register using current settings" \
            "4 Device setup" "Configure Modbus device" \
            "5 Network scan" "Network scan for Wirenboard devices" \
            "6 FW update" "Device firmware update" \
            "7 Show log file" "Show log file of current session" 2>$TMP_FILE

        case $? in
        $DIALOG_OK)
            case $(cat $TMP_FILE) in
            "1 Settings") set_communication_settings ;;
            "2 Show device info") show_device_info ;;
            "3 Read/write register") read_register ;;
            "4 Device setup") menu_device_setup ;;
            "5 Network scan") menu_network_scan ;;
            "6 FW update") menu_fw_update ;;
            "7 Show log file") show_log_file ;;
            *) menu_main ;;
            esac
            ;;
        $DIALOG_HELP)
            show_help "HELP" "\n                                              This is a short user guide of WB-MW-EXPLORER tool\n\n
            WB-MW-EXPLORER is a tool for easy scan and configuration network for Wirenboard Modbus devices. \n
            It is a graphical wrapper for modbus_client, wb-mcu-fw-flasher and wb-mcu-fw-updater tools. \n
            Configuration is stored in /etc/wb-mb-explorer.conf file, log of last session is stored in /var/log/wb-mb-explorer.log file. \n\n
            1 Settings  -   lets user to choose communication settings, which will be used for communication\n
                            with a device\n
            2 Show device info - reads most importand Wirenboard device information (device model, firmware version and etc.)\n
            3 Read/write register - allows user to read and write register of Modbus device using current \n
                                    communication settings\n
            4 Device setup - allows to setup device with current settings (set baudrate, address, reset settings to default)\n
            5 Network scan - scanning network for Wirenboard devices\n                        
            6 FW update - allows to update firmwares of Wirenboard devices\n
            7 Show log file - shows log file of current programm session\n\n
    To switch between menu items use Up and Down keys, for selecting answer buttons use TAB key or Left and Right keys.\n
    For filenames completion in selecting files dialogs use SPACE key."
            ;;
        *)

            show_exit_dialog "Are you sure to exit?"

            ;;
        esac

    done
}

stop_serial_driver() {

    if [[ "$(systemctl is-active wb-mqtt-serial)" = "active" ]]; then
        show_info_box "\n       Stopping service wb-mqtt-serial"
        systemctl stop wb-mqtt-serial
    fi
}

write_log() {
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") $1\n" >>$LOG_FILE
}

#start function of script
main() {
    clear

    #check serial driver for running before starting script
    if [[ "$(systemctl is-active wb-mqtt-serial)" = "active" ]]; then
        serial_driver_was_running=1
    else
        serial_driver_was_running=0
    fi

    #Stop driver wb-mqtt-serial
    stop_serial_driver

    #Reading current communication settings
    read_communication_settings

    #Clear log file
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") WB-MB-EXPLORER started\n" >$LOG_FILE

    #Show main menu
    menu_main

}

main
